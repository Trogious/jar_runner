Mappings:
  RegionMap:
    ap-south-1:
      AMI: ami-05194e6a
    eu-west-3:
      AMI: ami-680eb915
    eu-west-2:
      AMI: ami-22a8b046
    eu-west-1:
      AMI: ami-db51c2a2
    ap-northeast-2:
      AMI: ami-5295353c
    ap-northeast-1:
      AMI: ami-39e37b5f
    sa-east-1:
      AMI: ami-f052109c
    ca-central-1:
      AMI: ami-5984013d
    ap-southeast-1:
      AMI: ami-6755261b
    ap-southeast-2:
      AMI: ami-1fe21f7d
    eu-central-1:
      AMI: ami-0471e36b
    us-east-1:
      AMI: ami-74da830e
    us-east-2:
      AMI: ami-e782a982
    us-west-1:
      AMI: ami-1dacac7d
    us-west-2:
      AMI: ami-8f08bcf7
Resources:
  AMICreate:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  JarExecutorAMI:
    Type: Custom::AMI
    DependsOn: AMICreate
    Properties:
      ServiceToken: !GetAtt LambdaAMIFuction.Arn
      InstanceId: !Ref AMICreatorInstance
  LambdaAMIRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: ManageAMICreatorInstance
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeImages
                  - ec2:CreateImage
                  - ec2:DeregisterImage
                  - ec2:DescribeSnapshots
                  - ec2:DeleteSnapshot
                  - ec2:CreateTags
                  - ec2:TerminateInstances
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - ec2:TerminateInstances
                Resource: !Join
                  - ''
                  - - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/
                    - !Ref AMICreatorInstance
  LambdaAMIFuction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.handler
      Role: !GetAtt LambdaAMIRole.Arn
      Timeout: 300
      Code:
        ZipFile: !Sub |
          import logging
          import cfnresponse
          import json
          import boto3
          from botocore.exceptions import WaiterError

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)


          def handler(event, context):
              ec2 = boto3.resource('ec2')
              ec2client = boto3.client('ec2')

              def success(data={}):
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, data, physicalId)

              def failed(e):
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Data': str(e)}, physicalId)

              physicalId = event['PhysicalResourceId'] if 'PhysicalResourceId' in event else None
              logger.info('Request received: %s\n' % json.dumps(event))
              try:
                  instanceId = event['ResourceProperties']['InstanceId']
                  if not instanceId:
                      raise Exception('InstanceID required')
                  if 'RequestType' not in event:
                      success({'Data': 'No RequestType in event'})
                  elif event['RequestType'] == 'Delete':
                      if not physicalId.startswith('ami-'):
                          raise Exception('Unknown PhysicalId: %s' % physicalId)
                      images = ec2client.describe_images(ImageIds=[physicalId])
                      for image in images['Images']:
                          ec2.Image(image['ImageId']).deregister()
                          snapshots = ([bdm['Ebs']['SnapshotId'] for bdm in image['BlockDeviceMappings'] if 'Ebs' in bdm and 'SnapshotId' in bdm['Ebs']])
                          for snapshot in snapshots:
                              ec2.Snapshot(snapshot).delete()
                      success({'Data': 'AMIs and snapshots Deleted'})
                  elif event['RequestType'] in ['Create', 'Update']:
                      ami_name = 'JarRunnerAMI-${AWS::StackName}'
                      if not physicalId:  # AMI creation has not been requested yet
                          logger.info('Waiting for EC2 to stop: %s\n' % instanceId)
                          instance = ec2.Instance(instanceId)
                          instance.wait_until_stopped()  # TODO: fix to work properly on this lambda re-runs after timeout
                          logger.info('CreatingImage: %s\n' % ami_name)
                          image = instance.create_image(Name=ami_name)
                          physicalId = image.image_id
                      else:
                          logger.info('Continuing in awaiting image available: %s\n' % physicalId)
                      waiter = ec2client.get_waiter('image_available')
                      try:
                          waiter.wait(ImageIds=[physicalId], WaiterConfig={'Delay': 30, 'MaxAttempts': 9})
                      except WaiterError as e:
                          # Request the same event but set PhysicalResourceId so that the AMI is not created again
                          event['PhysicalResourceId'] = physicalId
                          logger.info('Timeout reached, continuing function: %s\n' % json.dumps(event))
                          lambda_client = boto3.client('lambda')
                          lambda_client.invoke(FunctionName=context.invoked_function_arn, InvocationType='Event', Payload=json.dumps(event))
                          return
                      images = ec2client.describe_images(ImageIds=[physicalId])
                      for image in images['Images']:
                          snapshots = ([bdm['Ebs']['SnapshotId'] for bdm in image['BlockDeviceMappings'] if 'Ebs' in bdm and 'SnapshotId' in bdm['Ebs']])
                          for snapshot in snapshots:
                              ec2.Snapshot(snapshot).create_tags(Tags=[{'Key': 'Name', 'Value': 'JarRunnerSnapshot-${AWS::StackName}'}])
                      ec2client.terminate_instances(InstanceIds=[instanceId])
                      success({'Data': 'AMI created: %s' % ami_name})
                  else:
                      success({'Data': 'Unknown RequestType'})
              except Exception as e:
                  failed(e)
  AMICreatorInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-CreateAMIInstance
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/sh -
          yum install -y python3 java-1.8.0-openjdk.x86_64
          pip3 install boto3
          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --region ${AWS::Region} \
            --resource AMICreate
          /usr/sbin/poweroff
Outputs:
  JarExecutorAMI:
    Value: !Ref JarExecutorAMI
