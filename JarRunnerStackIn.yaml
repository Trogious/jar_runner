Description: Deploys the entire environment for JarRunner
Mappings:
  RegionMap:
    ap-south-1:
      AMI: ami-05194e6a
    eu-west-3:
      AMI: ami-680eb915
    eu-west-2:
      AMI: ami-22a8b046
    eu-west-1:
      AMI: ami-db51c2a2
    ap-northeast-2:
      AMI: ami-5295353c
    ap-northeast-1:
      AMI: ami-39e37b5f
    sa-east-1:
      AMI: ami-f052109c
    ca-central-1:
      AMI: ami-5984013d
    ap-southeast-1:
      AMI: ami-6755261b
    ap-southeast-2:
      AMI: ami-1fe21f7d
    eu-central-1:
      AMI: ami-0471e36b
    us-east-1:
      AMI: ami-74da830e
    us-east-2:
      AMI: ami-e782a982
    us-west-1:
      AMI: ami-1dacac7d
    us-west-2:
      AMI: ami-8f08bcf7
Resources:
  InputBucketUsers:
    Type: AWS::IAM::Group
    Properties:
      Policies:
        -
          PolicyName: InputBucketAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: !GetAtt InputBucket.Arn
  OutputBucketUsers:
    Type: AWS::IAM::Group
    Properties:
      Policies:
        -
          PolicyName: OutputBucketAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: !GetAtt OutputBucket.Arn
  ScheduleQueue:
    Type: AWS::SQS::Queue
  NotifyTopic:
    Type: AWS::SNS::Topic
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      # NotificationConfiguration:
      #   LambdaConfigurations:
      #     -
      #       Function: !GetAtt LambdaNotifyFuction.Arn
      #       Event: 's3:ObjectCreated:*'
      #       Filter:
      #         S3Key:
      #           Rules:
      #             -
      #               Name: suffix
      #               Value: tgz
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
  LambdaAuthFuction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.handler
      Role: !GetAtt LambdaAuthRole.Arn
      Environment:
        Variables:
          JAR_LAMBDA_AUTH_CLIENT_ID: !Ref JarUserPoolClient
      Code:
        ZipFile: |
          jar_lambda_auth.py
  LambdaNewPassFuction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.handler
      Role: !GetAtt LambdaAuthRole.Arn
      Environment:
        Variables:
          JAR_LAMBDA_AUTH_CLIENT_ID: !Ref JarUserPoolClient
      Code:
        ZipFile: |
          jar_lambda_newpass.py
  LambdaListJarsFuction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.handler
      Role: !GetAtt LambdaListJarsRole.Arn
      Code:
        ZipFile: |
          jar_lambda_list_jars.py
  LambdaScheduleFuction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.handler
      Role: !GetAtt LambdaScheduleRole.Arn
      Code:
        ZipFile: |
          jar_lambda_schedule.py
  PermissionForS3ToInvokeLambdaNotify:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaNotifyFuction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt OutputBucket.Arn
  LambdaNotifyFuction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.handler
      Role: !GetAtt LambdaNotifyRole.Arn
      Environment:
        Variables:
          JAR_LAMBDA_NOTIFY_SNS_ARN: !Ref NotifyTopic
          JAR_LAMBDA_OUTPUT_BUCKET: "x"
      Code:
        ZipFile: |
          jar_lambda_notify.py
  LambdaNotifyRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: PublishToTopic
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: sns:Publish
                Resource: !Ref NotifyTopic
        -
          PolicyName: S3GetResults
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: s3:GetObject
                Resource: !GetAtt OutputBucket.Arn
  JarExecutorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: S3GetJar
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: s3:GetObject
                Resource: !GetAtt InputBucket.Arn
                Condition:
                  StringEquals:
                    s3:prefix:
                      - jars/
        -
          PolicyName: S3PutResults
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: s3:PutObject
                Resource: !GetAtt OutputBucket.Arn
  LambdaAuthRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  LambdaScheduleRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: PassRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt JarExecutorRole.Arn
  LambdaListJarsRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: ListJars
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: s3:ListBucket
                Resource: !GetAtt InputBucket.Arn
                Condition:
                  StringEquals:
                    s3:prefix:
                      - jars/
  JarApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: 2.0
        info:
          version: 1.0
          title: !Sub jar_runner_api-${AWS::StackName}
          description: !Sub Rest API for ${AWS::StackName}
        # host: ejdx39j2jj.execute-api.eu-central-1.amazonaws.com
        basePath: /dev
        schemes:
        - https
        paths:
          /auth:
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    '$ref': '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                httpMethod: POST
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                    - !GetAtt LambdaAuthFuction.Arn
                    - /invocations
                passthroughBehavior: WHEN_NO_MATCH
                contentHandling: CONVERT_TO_TEXT
                responses:
                  '200':
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: 'null'
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    '$ref': '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: MOCK
                passthroughBehavior: WHEN_NO_MATCH
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  '200':
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: 'null'
          /newpass:
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    '$ref': '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                httpMethod: POST
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                    - !GetAtt LambdaNewPassFuction.Arn
                    - /invocations
                passthroughBehavior: WHEN_NO_MATCH
                contentHandling: CONVERT_TO_TEXT
                responses:
                  '200':
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: 'null'
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    '$ref': '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: MOCK
                passthroughBehavior: WHEN_NO_MATCH
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  '200':
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: 'null'
          /list-jars:
            get:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    '$ref': '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - jar_authorizer_cognito: []
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                httpMethod: POST
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                    - !GetAtt LambdaListJarsFuction.Arn
                    - /invocations
                passthroughBehavior: WHEN_NO_MATCH
                contentHandling: CONVERT_TO_TEXT
                responses:
                  '200':
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: 'null'
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    '$ref': '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: MOCK
                passthroughBehavior: WHEN_NO_MATCH
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  '200':
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: 'null'
          /schedule:
            post:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    '$ref': '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - jar_authorizer_cognito: []
              x-amazon-apigateway-integration:
                type: AWS_PROXY
                httpMethod: POST
                uri: !Join
                  - ''
                  - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
                    - !GetAtt LambdaScheduleFuction.Arn
                    - /invocations
                passthroughBehavior: WHEN_NO_MATCH
                contentHandling: CONVERT_TO_TEXT
                responses:
                  '200':
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: 'null'
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    '$ref': '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: MOCK
                passthroughBehavior: WHEN_NO_MATCH
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  '200':
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: 'null'
        securityDefinitions:
          jar_authorizer_cognito:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - !GetAtt JarCognitoUserPool.Arn
              identitySource: method.request.header.Authorization
        definitions:
          Empty:
            type: object
            title: Empty Schema
  JarApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref JarApi
      Description: !Sub JarApi deployment for ${AWS::StackName}
      StageName: dev
  JarCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: jar_cognito_user_pool
  JarUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      GenerateSecret: false
      UserPoolId: !Ref JarCognitoUserPool
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
  AMICreate:
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  JarExecutorAMI:
    Type: Custom::AMI
    DependsOn: AMICreate
    Properties:
      ServiceToken: !GetAtt LambdaAMIFuction.Arn
      InstanceId: !Ref AMICreatorInstance
      Code: !Sub |
        jar_lambda_ami.py
  LambdaAMIRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: ManageAMICreatorInstance
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeImages
                  - ec2:CreateImage
                  - ec2:DeregisterImage
                  - ec2:DescribeSnapshots
                  - ec2:DeleteSnapshot
                  - ec2:CreateTags
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - ec2:TerminateInstances
                Resource: !Join
                  - ''
                  - - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:instance/
                    - !Ref AMICreatorInstance
              -
                Effect: Allow
                Action: s3:PutBucketNotification
                Resource: !GetAtt OutputBucket.Arn
  LambdaAMIFuction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.handler
      Role: !GetAtt LambdaAMIRole.Arn
      Timeout: 300
      Environment:
        Variables:
          JAR_LAMBDA_OUTPUT_BUCKET: !Ref OutputBucket
          JAR_LAMBDA_NOTIFY_FUNCTION_ARN: !GetAtt LambdaNotifyFuction.Arn
      Code:
        ZipFile: !Sub |
          jar_lambda_ami.py
  AMICreatorInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: Name
          Value: !Sub CreateAMIInstance-${AWS::StackName}
      UserData:
        Fn::Base64: !Sub
          - |
            jar_boot_ami_creator.sh
          - OutputBucket: !Ref OutputBucket
Outputs:
  InputBucketName:
    Value: !Ref InputBucket
  OutputBucketName:
    Value: !Ref OutputBucket
  WebsiteURL:
    Value: !GetAtt WebsiteBucket.WebsiteURL
